package com.demo.matching.profile.mock;

import com.demo.matching.common.exception.BusinessException;
import com.demo.matching.profile.domain.Profile;
import com.demo.matching.profile.service.port.in.ProfileRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

import static com.demo.matching.common.exception.BusinessResponseStatus.PROFILE_NOT_FOUND;

public class MockProfileRepository implements ProfileRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Profile> data = new ArrayList<>();

    @Override
    public Profile save(Profile profile) {
        if (Objects.isNull(profile.getId())) {
            Profile createProfile = Profile.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .member(profile.getMember())
                    .viewCount(profile.getViewCount())
                    .build();
            data.add(createProfile);
            return createProfile;
        }
        else {
            data.removeIf(item -> Objects.equals(item.getId(), profile.getId()));
            data.add(profile);
            return profile;
        }
    }

    @Override
    public Profile findById(Long profileId) {
        return data.stream().filter(item -> item.getId() == profileId)
                .findFirst()
                .orElseThrow(() -> new BusinessException(PROFILE_NOT_FOUND));
    }
}
